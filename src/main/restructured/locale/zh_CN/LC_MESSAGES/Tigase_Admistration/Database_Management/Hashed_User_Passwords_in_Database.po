# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TigaseDoc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-13 12:04-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:2
msgid "Hashed User Passwords in Database"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:6
msgid ""
"This feature is still available, but passwords are stored encrypted by "
"default since v8.0.0. We do not recommend using these settings."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:8
msgid ""
"By default, user passwords are stored in plain-text in the Tigase’s "
"database. However, there is an easy way to have them encoded in either "
"one of already supported ways or to even add a new encoding algorithm on "
"your own."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:10
msgid ""
"Storing passwords in hashed format in the database makes it possible to "
"avoid using a plain-text password authentication mechanism. You cannot "
"have hashed passwords in the database and non-plain-text password "
"authentication. On the other hand, the connection between the server and "
"the client is almost always secured by SSL/TLS so the plain-text password"
" authentication method is perhaps less of a problem than storing plain-"
"text passwords in the database."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:12
msgid "Nevertheless, it is simple enough to adjust this in Tigase’s database."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:15
msgid "Shortcut"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:17
msgid ""
"Connect to your database from a command line and execute following "
"statement for MySQL database:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:23
msgid "Where encoding mode is one of the following:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:25
msgid ""
"``MD5-PASSWORD`` the database stores MD5 hash code from the user’s "
"password."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:27
msgid ""
"``MD5-USERID-PASSWORD`` the database stores MD5 hash code from "
"concatenated user’s bare JID and password."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:29
msgid ""
"``MD5-USERNAME-PASSWORD`` the database stores MD5 hash code from "
"concatenated user’s name (localpart) and password."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:31
msgid "For example:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:38
msgid "Full Route"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:40
msgid ""
"The way passwords are stored in the DB is controlled by Tigase database "
"schema property. Properties in the database schema can be set by a stored"
" procedure called: ``TigPutDBProperty(key, value)``. Properties from the "
"DB schema can be retrieved using another stored function called: "
"``TigGetDBProperty(key)``."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:42
msgid ""
"The simplest way to call them is via command-line interface to the "
"database."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:44
msgid ""
"For the purpose of this guide let’s say we have a MySQL database and a "
"test account: ``test@example.com`` with password ``test77``."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:46
msgid ""
"By default, most of DB actions for Tigase, are performed using stored "
"procedures including user authentication. So, the first thing to do is to"
" make sure the stored procedures are working correctly."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:49
msgid "Create a Test User Account"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:51
msgid ""
"To add a new user account we use a stored procedure: "
"``TigAddUserPlainPw(bareJid, password)``. As you can see there is this "
"strange appendix to the procedure name: ``PlainPw``. This procedure "
"accepts plain passwords regardless how it is stored in the database. So "
"it is safe and easy to use either for plain-text passwords or hashed in "
"the DB. There are also versions of procedures without this appendix but "
"they are sensitive on the data format and always have to pass password in"
" the exact format it is stored in the database."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:53
msgid "So, let’s add a new user account:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:59
msgid ""
"If the result was 'Query OK', then it means the user account has been "
"successfully created."
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:62
msgid "Test User Authentication"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:64
msgid "We can now test user authentication:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:70
msgid "If authentication was successful the result looks like this:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:83
msgid "If authentication was unsuccessful, the result looks like this:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:97
msgid "Password Encoding Check"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:99
msgid ""
"``TigGetDBProperty`` is a function, not a procedure in MySQL database so "
"we have to use select to call it:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:105
msgid "Most likely output is this:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:116
msgid ""
"Which means a default password encoding is used, in plain-text and thus "
"no encoding. And we can actually check this in the database directly:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:122
msgid "And expected result with plain-text password format would be:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:134
msgid "Password Encoding Change"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:136
msgid "Now let’s set password encoding to MD5 hash:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:142
msgid ""
"'Query OK', means the password encoding has been successfully changed. Of"
" course we changed the property only. All the existing passwords in the "
"database are still in plain-text format. Therefore we expect that attempt"
" to authenticate the user would fail:"
msgstr ""

#: ../../Tigase_Admistration/Database_Management/Hashed_User_Passwords_in_Database.rst:156
msgid "We can fix this by updating the user’s password in the database:"
msgstr ""

