# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TigaseDoc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-13 12:04-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:2
#: ../../Tigase_Admistration/Security/Server_Certificates.rst:12
msgid "Server Certificates"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:4
msgid ":ref:`Creating and Loading the Server Certificate in pem Files<certspem>`"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:9
msgid "Creating and Loading the Server Certificate in pem Files"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:14
msgid ""
"Server certificates are needed when you use secure socket connections - "
"SSL/TLS."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:16
msgid ""
"For secure socket connection a proper certificate is needed. You can "
"either generate your own self-signed certificate or obtain certificate "
"from trusted third party organization."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:18
msgid "Here are steps how to obtain certificate from a trusted organization."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:20
msgid "Generating your Own Certificates"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:22
msgid ""
"Self-signed certificates can be generated easily on a Linux system. "
"Although it may not be considered a 'trusted' certificate authority, it "
"can be useful to test server installations. **We do not recommend regular"
" use of self-signed certificates**."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:26
msgid ""
"that Tigase v5.0 and later can automatically create self signed PEM files"
" if needed. However we will cover doing this process by hand."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:28
msgid ""
"This tutorial assumes you are running a Linux-based operating system with"
" access to command shell, and the 'Openssl' package is installed on the "
"system."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:30
msgid "The process takes the following steps:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:31
msgid ""
"1. Create a local private key. This file ends with .key extension. It is "
"recommended to create a new private key for the process."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:32
msgid ""
"2. Generate a certificate request. This file ends with the .csr extension"
" and is the file sent to the Certificate Authority to be signed."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:33
msgid ""
"3. CA signs private key. This can be done by your own computer, but can "
"also be done by private CAs for a fee."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:34
msgid ""
"4. Results are obtained from the CA. This is a ``.crt`` file which "
"contains a separate public certificate."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:35
msgid ""
"5. Combine the ``.csr`` and ``.crt`` file into a unified ``.pem`` file. "
"Tigase requires keys to be non-password protected PEM files."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:37
msgid "**Generate local private key.**"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:43
msgid ""
"This command generates a private key using a 1024 bit RSA algorithm. "
"``-out`` designates the name of the file, in this case it will be "
"``domain.com.key``. The exact name is not important, and the file will be"
" created in whatever directory you are currently in."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:45
msgid "**Generate a certificate request:.**"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:51
msgid ""
"This command generates a certificate request using the file specified "
"after ``-key``, and the result file will be ``domain.com.csr``. You will "
"be asked a series of questions to generate the request."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:68
msgid "**Sign the Certificate Request:.**"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:70
msgid ""
"Now the .csr file will be signed by a Certificate Authority. In this "
"tutorial, we will be self-signging our certificate. This practice however"
" is generally not recommended, and you will receive notifications that "
"your certificate is not trusted. There are commercial offers from "
"companies to sign your certificate from trusted sources. Please see the "
":ref:`Certificate From Other Providers<OtherSources>` section for more "
"information."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:76
msgid ""
"This command signs the certificate for 365 days and generates the "
"``domain.com.crt`` file. You can, of course use any number of days you "
"like."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:78
msgid "**Generate PEM file.**"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:80
msgid ""
"You should now have the following files in the working directory: ..\\\\ "
"domain.com.key domain.com.csr domain.com.crt"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:86
msgid ""
"If the certificate is issued by third-party authority you will have to "
"attach the certificate chain, that being certificate of the authority who"
" has generated your certificate. You normally need to obtain certificates"
" for your chain from the authority who has generated your certificate."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:88
msgid "The result file should looks similar to:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:114
msgid ""
"For Tigase server as well as many other servers (Apache 2.x), the order "
"is following; your domain certificate, your private key, authority "
"issuing your certificate, root certificate."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:118
msgid ""
"Tigase requires full certificate chain in PEM file (described above)! "
"Different applications may require pem file with certificates and private"
" key in different order. So the same file may not be necessarily used by "
"other services like Web server or e-mail server. Currently, Tigase can "
"automatically sort certificates in PEM file while loading it.**"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:121
msgid "Installing/Loading Certificate To the Tigase Server"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:123
msgid ""
"Installing and loading certificates is very easy. The server can load all"
" certificates directly from **pem** files. You just need to create a "
"separate pem file for each of your virtual domains and put the file in a "
"directory accessible by the server. Tigase server can automatically load "
"all **pem** files found in given directory. By default, and to make "
"things easy, we recommend the ``Tigase/certs`` directory."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:125
msgid ""
"It’s also possible to use: \\* Admin ad-hoc command via XMPP client - you"
" should navigate to Service Discovery of your server and in the list of "
"commands for ``VHost Manager`` component select ``Add SSL Certificate`` "
"and then follow instructions \\* Admin WebUI - open "
"``http://<host>/admin``, navigate to ``Other`` category and in it select "
"``Add SSL Certificate`` and then follow instructions \\* REST API - make "
"a ``POST`` request to ``http://localhost:8080/rest/adhoc/vhost-"
"man@domain.com`` with payload containing your certificate; to get the "
"required form fields make ``GET`` request to the same endpoint"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:130
msgid "Certificate From Other Providers"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:132
msgid ""
"There is number of certificate providers offering certificates either for"
" free or for money. You can use any of them, however you have to be aware"
" that sometimes certificates might not be recognized by all XMPP servers,"
" especially if it’s one from a new provider. Here is an example list of "
"providers:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:134
msgid ""
"LetsEncrypt - please see `Installing LetsEncrypt Certificates in Your "
"Linux System<LetsEncryptCertificate>` for details"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:136
msgid ""
"`CAcert <https://www.cacert.org/>`__ - free certificates with Web GUI. "
"(WARNING: it’s not widely accepted)"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:138
msgid ""
"`Verisign <https://www.verisign.com/>`__ - very expensive certificates "
"comparing to above provides but the provider is recognized by everybody. "
"If you have a certificate from Verisign you can be sure it is identified "
"as a valid certificate."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:140
msgid ""
"`Comodo Certificate Authority <http://www.comodo.com/business-security"
"/digital-certificates/ssl-certificates.php>`__ offers different kind of "
"commercial certificates"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:142
msgid ""
"To obtain certificate from a third party authority you have to go to its "
"website and request the certificate using certificate request generated "
"above. I cannot provide any instructions for this as each of the "
"providers listed have different requirements and interfaces."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:144
msgid ""
"We **highly** recommend using LetsEncrypt keys to self-sign and secure "
"your domain. Instructions are in the :ref:`next "
"section<LetsEncryptCertificate>`."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:147
msgid "Using one certificate for multiple domains"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:151
msgid ""
"Tigase tries to be *smart* and automatically detects wildcard domain and "
"alternative domains so it’s not needed to duplicate same certificate in "
"multiple files to match domains - same file will be loaded and make "
"available for all domains (CNames) available in the certificate."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:156
msgid "Installing LetsEncrypt Certificates in Your Linux System"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:158
msgid ""
"LetsEncrypt is a trusted CA that provides free security certificates. "
"Unlike previously self-signed certificates, we can use LetsEncrypt "
"Certificates to certify your domains from a trusted source."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:160
msgid ""
"Please refer to official `certbot User Guide "
"<https://certbot.eff.org/docs/using.html>`__ for details how to install "
"and operate the tool, choosing desired method of domain authentication "
"(DNS or webserver). After successful execution the certificate with all "
"related files will be stored under ``/etc/letsencrypt/live/$domain``"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:167
msgid "In that directory, you will find four files:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:169
msgid "``privkey.pem`` - private key for the certificate"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:171
msgid "``cert.pem`` - contains the server certificate by itself"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:173
msgid ""
"``chain.pem`` - contains the additional intermediate certificate or "
"certificates"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:175
msgid ""
"``fullchain.pem`` - all certificates, including server certificate (aka "
"leaf certificate or end-entity certificate). The server certificate is "
"the first one in this file, followed by any intermediates."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:177
msgid ""
"For Tigase XMPP Server, we are only concerned with ``privkey.pem`` and "
"``fullchain.pem`` (or ``chain.pem`` - please consider actual issuers and "
"certification chain!)."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:179
msgid ""
"At this point we will need to obtain the root and intermediate "
"certificates, this can be done by downloading these certificates from the"
" `LetsEncrypt Chain of Trust website "
"<https://letsencrypt.org/certificates/>`__."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:183
msgid ""
"Please pay utmost attention to the actual certificate issuers and make "
"sure that the certification chain is maintained!"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:185
msgid ""
"On the time of the writing, LetsEncrypt was providing domain certificates"
" issued by ``R3`` CertificateAuthorigy (CA). In order to provide complete"
" chain to the root CA you should get Let’s Encrypt R3 (``RSA 2048, O = "
"Let’s Encrypt, CN = R3``) certificate. Depending on desired certification"
" chain you have two options: 1) (default and recommended) using own "
"LetsEncrypt CA: a) ``R3`` certificate signed by ISRG Root X1: "
"https://letsencrypt.org/certs/lets-encrypt-r3.pem b) ``ISRG Root X1`` "
"root certificate: https://letsencrypt.org/certs/isrgrootx1.pem 2) "
"(legacy, option more compatible with old systems): cross-signed "
"certificate by IdenTrust: a) ``R3`` certificate cross-signed by "
"IdenTrust: https://letsencrypt.org/certs/lets-encrypt-r3-cross-signed.pem"
" b) ``TrustID X3 Root`` from IdenTrust: "
"https://letsencrypt.org/certs/trustid-x3-root.pem.txt"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:187
msgid "Considering first (recommended) option, you may obtain them using wget:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:194
msgid ""
"These are the root certificate, and the intermediate certificate signed "
"by root certificate."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:198
msgid ""
"IdenTrust cross-signed certificate will not function properly in the "
"future!"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:200
msgid ""
"Take the contents of your ``privkey.pem``, certificate, and combine them "
"with the contents of ``isrgrootx1.pem`` and ``lets-encrypt-r3.pem`` into "
"a single pem certificate."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:202
msgid ""
"Depending on your configuration you either need to name the file after "
"your domain such as ``mydomain.com.pem`` and place it under ``certs/`` "
"subdirectory of Tigase XMPP Server installation or update it using admin "
"ad-hoc (see :ref:`Storing and managing certificates<certificateStorage>`)"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:204
msgid ""
"If you moved all certs to a single directory, you may combine them using "
"the following command under \\*nix operating systems:."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:213
msgid ""
"If you are using ``isrgrootx1`` root make sure you use ``cert.pem`` file "
"instead of ``fullchain.pem``, which uses different intermediate "
"certificate ( `Let’s Encrypt Authority X3 (IdenTrust cross-signed) "
"<https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt>`__ )"
" and you will have to use `DST Root CA X3 "
"<https://letsencrypt.org/certs/trustid-x3-root.pem.txt>`__ certificate!"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:215
msgid "Your certificate should look something like this:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:237
msgid ""
"LetsEncrypt certificates expire 90 days from issue and need to be renewed"
" in order for them to remain valid!"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:239
msgid "You can check your certificate with utility class:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:246
msgid "Let’s encrypt and DNS verification"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:248
msgid ""
"The only way to obtain wildcard (``*.domain.com``) certificate is via DNS"
" verification. Certbot support a number of DNS operators - you can check "
"if your DNS provider is listed by executing ``$ certbot plugins``"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:250
msgid "AWS Route53"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:252
msgid "If you want to use it with Amazon Cloud you should install plugin for AWS:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:260
msgid ""
"If you are using certbot under macOS and you installed it via brew then "
"you should use: ``$( brew --prefix certbot )/libexec/bin/pip install "
"certbot-dns-route53``"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:262
msgid ""
"You should store your credentials in ``~/.aws/credentials`` (you may want"
" to create dedicated policy for updating DNS as described in `plugin’s "
"documentation <https://certbot-dns-route53.readthedocs.io/en/stable/>`__:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:270
msgid ""
"And afterward you should execute ``certbot`` with ``--dns-route53`` "
"parameter"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:273
msgid "Certbot update hook and Tigase API"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:275
msgid ""
"For greater automation it’s possible to automate updating certificate "
"obtained with ``certbot`` in Tigase XMPP Server. You should use following"
" deploy hook - either add it to ``/etc/letsencrypt/renewal-"
"hooks/deploy/`` or use it directly in ``certboot`` commandline with "
"``--deploy-hook`` parameter (in the latter case, it will be added to "
"particular domain configuration so it’s not necessary to specify "
"UPDATE_DOMAINS)."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:279
msgid ""
"Please adjust account credentials used for deployment (``USER``, "
"``PASS``, ``DOMAIN``) as well as paths to Let’s Encrypt certificates "
"(*ISRG Root X1* named ``isrgrootx1.pem`` and *Let’s Encrypt Authority X3*"
" named ``letsencryptauthorityx3.pem``)"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:362
msgid ""
"If you are not using wildcard certificate when you have to provide "
"certificate for main domain as well as certificates for subdomains that "
"mach all components that you want to expose (muc, pubsub, push, etc…)"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:367
msgid "Storing and managing certificates"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:370
msgid "Filesystem"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:372
msgid ""
"By default Tigase loads and stores certificates in ``certs/`` "
"subdirectory. Each *domain* certificate should be stored in a file which "
"filename consists of domain name and ``.pem`` extension, i.e. "
"``<domain>.pem``. For example for domain tigase.net it would be "
"``certs/tigase.net.pem``."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:376
msgid ""
"Tigase tries to be *smart* and automatically detects wildcard domain and "
"alternative domains so it’s not needed to duplicate same certificate in "
"multiple files to match domains."
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:379
msgid "Database repository"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:381
msgid ""
"Alternatively it’s possible to use database as a storage for the "
"certificates. Upon enabling it certificates won’t be read nor stored to "
"the filesystem. You can enable it by adding ``repository () {}`` bean to "
"``'certificate-container' () {}`` in your TDSL configuration file:"
msgstr ""

#: ../../Tigase_Admistration/Security/Server_Certificates.rst:389
msgid ""
"If you are using database repository then you manage/update certificates "
"using either ad-hoc command ``Add SSL certificate`` from *VHost Manager* "
"or via HTTP REST API."
msgstr ""

