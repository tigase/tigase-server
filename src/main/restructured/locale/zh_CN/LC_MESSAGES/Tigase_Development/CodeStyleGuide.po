# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TigaseDoc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-13 12:04-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../Tigase_Development/CodeStyleGuide.rst:2
msgid "Tigase Code Style"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:5
msgid "Introduction"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:8
msgid ""
"This documents defines and describes coding style and standard used in "
"Tigase projects source code."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:10
msgid ""
"Examples should be considered as **non-normative**, that is formatting "
"choices should not be treated as rules."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:13
msgid "Source file basics"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:16
msgid "Technicals details"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:18
msgid ""
"File name consists of the case-sensitive, camel-cased name of the top-"
"level class it contains plus the ``.java`` extension."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:20
msgid "Source files are encoded in **UTF-8**."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:24
msgid "Source file structure"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:26
msgid "A source file consists of, **in order**:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:28
msgid "License or copyright information, if present"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:30
msgid "Package statement"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:32
#: ../../Tigase_Development/CodeStyleGuide.rst:43
msgid "Import statements"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:34
msgid "Exactly one top-level class"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:36
msgid "Additionally:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:38
msgid "**Exactly one blank line** separates sections 2-4;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:40
msgid ""
"The package statement is **not line-wrapped** (column limit does not "
"apply);"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:45
msgid "Wildcard imports can be used for:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:47
msgid "more than 5 class imports;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:49
msgid "more than 3 name imports;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:51
msgid "import statements are **not line-wrapped** (column limit does not apply);"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:53
msgid "following import ordering applies:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:55
msgid "all imports not pertaining to any of the groups listed below"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:57
#: ../../Tigase_Development/CodeStyleGuide.rst:63
msgid "``blank line``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:59
msgid "``javax.*`` classes"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:61
msgid "``java.*`` classes"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:65
msgid "all static imports in single block"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:67
msgid ""
"items in each block are ordered by names in ASCII sort order (since ``;``"
" sorts before ``.``)"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:70
msgid "Class declaration"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:72
msgid "Each top-level class resides in a source file of its own."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:75
msgid "Class contents order"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:77
msgid "Following order of the elements of the class is mandatory:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:79
msgid "``final``, ``static`` fields in following order:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:81
#: ../../Tigase_Development/CodeStyleGuide.rst:93
#: ../../Tigase_Development/CodeStyleGuide.rst:105
#: ../../Tigase_Development/CodeStyleGuide.rst:115
msgid "``public``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:83
#: ../../Tigase_Development/CodeStyleGuide.rst:95
#: ../../Tigase_Development/CodeStyleGuide.rst:107
#: ../../Tigase_Development/CodeStyleGuide.rst:117
msgid "``protected``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:85
#: ../../Tigase_Development/CodeStyleGuide.rst:97
#: ../../Tigase_Development/CodeStyleGuide.rst:109
#: ../../Tigase_Development/CodeStyleGuide.rst:119
msgid "``package-private``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:87
#: ../../Tigase_Development/CodeStyleGuide.rst:99
#: ../../Tigase_Development/CodeStyleGuide.rst:111
#: ../../Tigase_Development/CodeStyleGuide.rst:121
msgid "``private``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:89
msgid "``public`` ``enum``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:91
msgid "``static`` fields in following order:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:101
msgid "``static`` initializer block"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:103
msgid "``final`` fields in following order:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:113
msgid "fields without modifiers in following order:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:123
msgid "initializer block"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:125
msgid "``static`` method(s)"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:127
msgid "constructor(s)"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:129
msgid "methods(s) without modifiers"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:131
msgid "enums(s) without modifiers"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:133
msgid "interfaces(s) without modifiers"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:135
msgid "inner ``static`` classes"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:137
msgid "inner classes"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:139
msgid "In addition:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:141
msgid "Getters and Setters are kept together"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:143
msgid ""
"Overloads are never split - multiple constructors or methods with the "
"same name appear sequentially."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:146
msgid "Formatting"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:149
msgid "Braces"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:151
msgid ""
"Braces are mandatory in optional cases - for all syntax where braces use "
"can be optional, Tigase mandate using braces even if the body is empty or"
" contains only single statement."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:153
msgid ""
"Braces follow the Kernighan and Ritchie style (`Egyptian brackets "
"<http://www.codinghorror.com/blog/2012/07/new-programming-"
"jargon.html>`__):"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:155
msgid "No line break before the opening brace."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:157
msgid "Line break after the opening brace."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:159
msgid "Line break before the closing brace."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:161
msgid ""
"Line break after the closing brace, *only if* that brace terminates a "
"statement or terminates the body of a method, constructor, or *named* "
"class. For example, there is *no* line break after the brace if it is "
"followed by ``else`` or a comma."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:165
msgid "Block indentation: tab"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:167
msgid ""
"All indentation (opening a new block of block-like construct) must be "
"made with tabs. After the block, then indent returns to the previous."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:169
msgid "Ideal tab-size: 4"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:172
msgid "Column limit: 120"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:174
msgid ""
"Defined column limit is 120 characters and must be line-wrapped as "
"described below Java code has a column limit of 100 characters. Except as"
" noted below, any line that would exceed this limit must be line-wrapped,"
" as explained in section `Line-wrapping <#line-wrapping>`__."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:177
msgid "Line-wrapping"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:179
msgid ""
"*line-wrapping* is a process of dividing long lines that would otherwise "
"go over the defined Column Limit (above). It’s recommended to wrap lines "
"whenever it’s possible even if they are not longer than defined limit."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:182
msgid "Whitespace"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:185
msgid "Vertical Whitespace"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:187
msgid "A single blank line appears:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:189
msgid "after package statement;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:191
msgid "before imports;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:193
msgid "after imports;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:195
msgid "around class;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:197
msgid "after class header;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:199
msgid "around field in interface;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:201
msgid "around method in interface;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:203
msgid "around method;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:205
msgid "around initializer;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:207
msgid "as required by other sections of this document."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:209
msgid "Multiple blank lines are not permitted."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:212
msgid "Horizontal whitespace"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:214
msgid ""
"Beyond where required by the language or other style rules, and apart "
"from literals, comments and Javadoc, a single ASCII space also appears in"
" the following places **only**."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:216
msgid ""
"Separating any reserved word, such as ``if``, ``for``, ``while``, "
"``switch``, ``try``, ``catch`` or ``synchronized``, from an open "
"parenthesis (``(``) that follows it on that line"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:218
msgid ""
"Separating any reserved word, such as ``else`` or ``catch``, from a "
"closing curly brace (``}``) that precedes it on that line"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:220
msgid "Before any open curly brace (``{``), with two exceptions:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:222
msgid "``@SomeAnnotation({a, b})`` (no space is used)"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:224
msgid ""
"``String[][] x = {{\"foo\"}};`` (no space is required between ``{{``, by "
"item 8 below)"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:226
msgid ""
"On both sides of any binary or ternary operator. This also applies to the"
" following \"operator-like\" symbols:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:228
msgid "the ampersand in a conjunctive type bound: ``<T extends Foo & Bar>``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:230
msgid ""
"the pipe for a catch block that handles multiple exceptions: ``catch "
"(FooException | BarException e)``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:232
msgid "the colon (``:``) in an enhanced ``for`` (\"foreach\") statement"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:234
msgid "the arrow in a lambda expression: ``(String str) → str.length()``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:236
msgid "**but not:**"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:238
msgid ""
"the two colons (``::``) of a method reference, which is written like "
"``Object::toString``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:240
msgid "the dot separator (``.``), which is written like ``object.toString()``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:242
msgid "After ``,:;`` or the closing parenthesis (``)``) of a cast"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:244
msgid "Between the type and variable of a declaration: ``List<String> list``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:247
msgid "Horizontal alignment: never required"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:249
msgid ""
"*Horizontal alignment* is the practice of adding a variable number of "
"additional spaces in your code with the goal of making certain tokens "
"appear directly below certain other tokens on previous lines."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:251
msgid ""
"This practice is permitted, but is **never required**. It is not even "
"required to *maintain* horizontal alignment in places where it was "
"already used."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:254
msgid "Specific constructs"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:257
msgid "Enum classes"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:259
msgid "After each comma that follows an enum constant, a line break is mandatory."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:262
msgid "Variable declarations"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:264
msgid ""
"One variable per declaration - Every variable declaration (field or "
"local) declares only one variable: declarations such as ``int a, b;`` are"
" not used."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:266
msgid ""
"Declared when needed -Local variables are **not** habitually declared at "
"the start of their containing block or block-like construct. Instead, "
"local variables are declared close to the point they are first used "
"(within reason), to minimize their scope. Local variable declarations "
"typically have initializers, or are initialized immediately after "
"declaration."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:269
msgid "Arrays"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:271
msgid ""
"Any array initializer may *optionally* be formatted as if it were a "
"\"block-like construct.\" (especially when line-wrapping need to be "
"applied)."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:274
msgid "Naming"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:277
msgid "Rules common to all identifiers"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:279
msgid ""
"Identifiers use only ASCII letters and digits, and, in a small number of "
"cases noted below, underscores. Thus each valid identifier name is "
"matched by the regular expression ``\\w+`` ."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:282
msgid "Specific Rules by identifier type"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:284
msgid ""
"Package names are all lowercase, with consecutive words simply "
"concatenated together (no underscores, not camel-case)."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:286
msgid "Class names are written in **UpperCamelCase**."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:288
msgid "Method names are written in **lowerCamelCase**."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:290
msgid ""
"Constant names use ``CONSTANT_CASE``: all uppercase letters, with words "
"separated by underscores."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:292
msgid ""
"Non-constant field names (static or otherwise) are written in "
"**lowerCamelCase**."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:294
msgid ""
"Parameter names are written in **lowerCamelCase** (one-character "
"parameter names in public methods should be avoided)."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:296
msgid "Local variable names are written in **lowerCamelCase**."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:299
msgid "Programming Practices"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:301
msgid ""
"A method is marked with the ``@Override`` annotation whenever it is "
"legal. This includes a class method overriding a superclass method, a "
"class method implementing an interface method, and an interface method "
"re-specifying a super-interface method."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:303
msgid ""
"Caught exceptions should not be ignored (and if this is a must then a log"
" entry is required)."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:306
msgid "Javadoc"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:308
msgid "blank lines should be inserted after:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:310
msgid "description,"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:312
msgid "parameter description,"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:314
msgid "return tag;"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:316
msgid "empty tag should be included for following tags:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:318
msgid "``@params``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:320
msgid "``@return``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:322
msgid "``@throws``"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:325
msgid "Usage"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:327
msgid ""
"At the *minimum*, Javadoc is present for every ``public`` class, and "
"every ``public`` or ``protected`` member of such a class, with a few "
"exceptions:"
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:329
msgid ""
"is optional for \"simple, obvious\" methods like ``getFoo``, in cases "
"where there *really and truly* is nothing else worthwhile to say but "
"\"Returns the foo\"."
msgstr ""

#: ../../Tigase_Development/CodeStyleGuide.rst:331
msgid "in methods that overrides a supertype method."
msgstr ""

