# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version:  TigaseDoc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-03 03:02-0700\n"
"PO-Revision-Date: 2022-07-28 09:23+0000\n"
"Last-Translator: Qian Luo <qian.luo@tigase.net>\n"
"Language: zh_CN\n"
"Language-Team: Chinese (Simplified) <http://translate.tigase.net/projects"
"/tigase-xmpp-server/dg-old_stuff/zh_Hans/>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../Tigase_Development/Old_Stuff.rst:2
msgid "Old Stuff"
msgstr "旧东西"

#: ../../Tigase_Development/Old_Stuff.rst:4
msgid ""
"This contains sections on old features, or information pertaining to old "
"builds of Tigase. It is kept here for archival purposes."
msgstr "这包含有关旧功能的部分，或与Tigase旧版本有关的信息。它被保存在这里用于存档目的。"

#: ../../Tigase_Development/Old_Stuff.rst:7
msgid "Tigase DB Schema Explained"
msgstr "Tigase DB架构解释"

#: ../../Tigase_Development/Old_Stuff.rst:9
msgid ""
"The schema basics, how it looks like and brief explanation to all rows "
"can be found in the `list of schema files <https://github.com/tigase"
"/tigase-server/tree/master/src/main/database>`__. However, this is hardly"
" enough to understand how it works and how all the data is accessed. "
"There are only 3 basic tables which actually keep all the Tigase server "
"users' data: **tig_users**, **tig_nodes** and **tig_pairs**. Therefore it"
" is not clear at first how Tigase’s data is organized."
msgstr ""
"架构基础知识、外观和对所有行的简要说明可以在 `架构文件列表 <https://github.com/tigase/tigase-"
"server/tree/master/src/main/database>`__ "
"中找到。然而，这还不足以理解它是如何工作的以及如何访问所有数据。只有3个基本表实际上保存了所有Tigase服务器用户的数据：**tig_users**、**tig_nodes**"
" 和 **tig_pairs**。因此，起初并不清楚Tigase的数据是如何组织的。"

#: ../../Tigase_Development/Old_Stuff.rst:11
msgid ""
"Before you can understand the Tigase XMPP Server database schema, how it "
"works and how to use it, is it essential to know what were the goals of "
"it’s development and why it works that way. Let’s start with the API as "
"this gives you the best introduction."
msgstr ""
"在您了解Tigase "
"XMPP服务器数据库架构、它是如何工作以及如何使用它之前，了解它的开发目标是什么以及为什么它以这种方式工作是必不可少的。让我们从API开始，因为它为您提供了最好的介绍。"

#: ../../Tigase_Development/Old_Stuff.rst:13
msgid "Simplified access can be made through methods:"
msgstr "可以通过以下方法进行简化访问："

#: ../../Tigase_Development/Old_Stuff.rst:20
msgid "And more a complex version:"
msgstr "还有更复杂的版本："

#: ../../Tigase_Development/Old_Stuff.rst:27
msgid ""
"Even though the API contains more methods, the rest is more or less a "
"variation of presented above. A complete API description for all access "
"methods is available in JavaDoc documentation in the `UserRepository "
"<https://github.com/tigase/tigase-"
"server/tree/master/src/main/java/tigase/db/UserRepository.java>`__ "
"interface. So we are not going into too much detail here except for the "
"main idea."
msgstr ""
"尽管API包含更多方法，但其余的或多或少是上面介绍的变体。 `UserRepository <https://github.com/tigase"
"/tigase-"
"server/tree/master/src/main/java/tigase/db/UserRepository.java>`__ "
"接口中的JavaDoc文档中提供了所有访问方法的完整API描述接口。因此，除了主要想法之外，我们不会在这里过多地讨论细节。"

#: ../../Tigase_Development/Old_Stuff.rst:29
msgid ""
"Tigase operates on <*key*, **value**> pairs for the individual user data."
" The idea behind this was to make the API very simple and also at the "
"same time very flexible, so adding a new plugin or component would not "
"require a database schema change, adding new tables, or conversion of the"
" DB schema to a new version."
msgstr ""
"Tigase对单个用户数据的 <*key*, **value**> "
"对进行操作。这背后的想法是想让API非常简单，同时也非常灵活，因此添加新插件或组件不需要更改数据库架构、添加新表或将数据库架构转换为新版本。"

#: ../../Tigase_Development/Old_Stuff.rst:31
msgid ""
"As a result the **UserRepository** interface is exposed to all of "
"Tigase’s code, mainly the components and plugins (let’s call all of them "
"modules). These modules simply call set/get methods to store or access "
"module specific data."
msgstr ""
"结果，**UserRepository** 接口暴露给Tigase的所有代码，主要是组件和插件（我们称它们为模块）。这些模块只需调用 "
"set/get 方法来存储或访问模块特定的数据。"

#: ../../Tigase_Development/Old_Stuff.rst:33
msgid ""
"As plugins or components are developed independently it may easily happen"
" that developer choses the same key name to store some information. To "
"avoid key name conflicts in the database a 'node' concept has been "
"introduced. Therefore, most modules when set/get key value they also "
"provide a subnode part, which in most cases is just XMLNS or some other "
"unique string."
msgstr "由于插件或组件是独立开发的，开发人员很容易选择相同的键名来存储一些信息。为了避免数据库中的键名冲突，引入了'节点'概念。因此，大多数模块在设置/获取键值时还提供了一个子节点部分，在大多数情况下，它只是XMLNS或其他一些唯一字符串。"

#: ../../Tigase_Development/Old_Stuff.rst:35
msgid ""
"The 'node' thing is a little bit like directory in a file system, it may "
"contain subnodes which makes the Tigase database behave like a "
"hierarchical structure. And the notation is also similar to file systems,"
" you use just **/** to separate node levels. In practice you can have the"
" database organized like this:"
msgstr ""
"'节点'有点像文件系统中的目录，它可能包含子节点，这使得Tigase数据库表现得像一个层次结构。并且符号也类似于文件系统，您只使用 **/** "
"来分隔节点级别。在实践中，您可以像这样组织数据库："

#: ../../Tigase_Development/Old_Stuff.rst:47
msgid ""
"So to access item’s 1 data from the roster you could call method like "
"this:"
msgstr "因此，要从名册中访问item1的数据，您可以调用如下方法："

#: ../../Tigase_Development/Old_Stuff.rst:53
msgid ""
"This is huge convenience for the developer, as he can focus on the module"
" logic instead of worrying about data storage implementation and "
"organization. Especially at the prototype phase it speeds development up "
"and allows for a quick experiments with different solutions. In practice,"
" accessing user’s roster in such a way would be highly inefficient so the"
" roster is stored a bit differently but you get the idea. Also there is a"
" more complex API used in some places allowing for more direct access to "
"the database and store data in any format optimized for the scenario."
msgstr "这对开发人员来说是极大的方便，因为他可以专注于模块逻辑，而不用担心数据存储实现和组织。特别是在原型阶段，它加快了开发速度，并允许使用不同的解决方案进行快速实验。在实践中，以这种方式访问用户名册的效率非常低，因此名册的存储方式略有不同，但你已经明白了此方法。此外，在某些地方使用了更复杂的API，允许更直接地访问数据库并以针对场景优化的任何格式存储数据。"

#: ../../Tigase_Development/Old_Stuff.rst:55
msgid ""
"Right now such a hierarchical structure is implemented on top of SQL "
"databases but initially Tigase’s database was implemented as an XML "
"structure, so it was natural and simple."
msgstr "现在这种层次结构是在SQL数据库之上实现的，但最初Tigase的数据库是作为XML结构实现的，所以它自然而简单。"

#: ../../Tigase_Development/Old_Stuff.rst:57
msgid "In the SQL database we simulate hierarchical structure with three tables:"
msgstr "在SQL数据库中，我们用三个表模拟层次结构："

#: ../../Tigase_Development/Old_Stuff.rst:59
msgid ""
"**tig_users** - with main users data, user id (JID), optional password, "
"active flag, creation time and some other basic properties of the "
"account. All of them could be actually stored in tig_pairs but for "
"performance reasons they are in one place to quickly access them with a "
"single, simple query."
msgstr ""
"**tig_users** - 包含主要用户数据、用户ID "
"(JID)、可选密码、活动标志、创建时间和帐户的一些其他基本属性。所有这些实际上都可以存储在tig_pairs中，但出于性能原因，它们位于一个位置，可以通过一个简单的查询快速访问它们。"

#: ../../Tigase_Development/Old_Stuff.rst:61
msgid ""
"**tig_nodes** - is a table where the hierarchy is implemented. When "
"Tigase was storing data in XML database the hierarchy was quite complex. "
"However, in a SQL database it resulted in a very slow access to the data "
"and a now more flat structure is used by most components. Please note, "
"every user’s entry has something called root node, which is represented "
"by 'root' string;"
msgstr ""
"**tig_nodes** - "
"是实现层次结构的表。当Tigase在XML数据库中存储数据时，层次结构非常复杂。但是，在SQL数据库中，它会导致对数据的访问非常缓慢，并且现在大多数组件都使用更扁平的结构。请注意，每个用户的条目都有一个叫做根节点的东西，它由'root'字符串表示；"

#: ../../Tigase_Development/Old_Stuff.rst:63
msgid ""
"**tig_pairs** - this is the table where all the user’s information is "
"stored in form of the <key, value> pairs."
msgstr "**tig_pairs** - 这是所有用户信息以<key, value>对的形式存储的表。"

#: ../../Tigase_Development/Old_Stuff.rst:65
msgid ""
"So we now know how the data is organized. Now we are going to learn how "
"to access the data directly in the database using SQL queries."
msgstr "所以我们现在知道数据是如何组织的。现在我们将学习如何使用SQL查询直接访问数据库中的数据。"

#: ../../Tigase_Development/Old_Stuff.rst:67
msgid ""
"Let’s assume we have a user 'admin@test-d' for whom we want to retrieve "
"the roster. We could simply execute query:"
msgstr "假设我们有一个用户'admin@test-d'，我们要为其检索花名册。我们可以简单地执行查询："

#: ../../Tigase_Development/Old_Stuff.rst:77
msgid ""
"However, if multiple modules store data under the key 'roster' for a "
"single user, we would receive multiple results. To access the correct "
"'roster' we also have to know the node hierarchy for this particular key."
" The main users roster is stored under the 'root' node, so the query "
"would look like:"
msgstr ""
"但是，如果多个模块将数据存储在单个用户的键'roster' "
"下，我们将收到多个结果。要访问正确的'roster'，我们还必须知道这个特定键的节点层次结构。主要用户名册存储在 'root' "
"节点下，因此查询如下所示："

#: ../../Tigase_Development/Old_Stuff.rst:89
msgid ""
"How exactly the information is stored in the **tig_pairs** table depends "
"on the particular module. For the roster it looks a bit like XML content:"
msgstr "**tig_pairs** 表中信息的准确存储方式取决于特定模块。对于名册，它看起来有点像XML内容："

#: ../../Tigase_Development/Old_Stuff.rst:96
msgid "Why the most recent JDK?"
msgstr "为什么是最新的JDK？"

#: ../../Tigase_Development/Old_Stuff.rst:98
msgid ""
"There are many reasons but the main is that we are a small team working "
"on source code. So the whole approach is to make life easier for us, make"
" the project easier to maintain, and development more efficient."
msgstr "原因有很多，但主要原因是我们是一个致力于源代码的小团队。所以整个方法是让我们的生活更轻松，让项目更容易维护，开发更高效。"

#: ../../Tigase_Development/Old_Stuff.rst:100
msgid "Here is the list:"
msgstr "这是列表："

#: ../../Tigase_Development/Old_Stuff.rst:102
msgid ""
"**Easy to maintain** - No third-party libraries are used for the project "
"which makes this project much easier to maintain. This simplifies issues "
"of compatibility between particular versions of libraries. This also "
"unifies coding with a single library package without having to rely on "
"specific versions that may not be supported."
msgstr ""
"**易于维护** - "
"该项目不使用第三方库，这使得该项目更易于维护。这简化了特定版本库之间的兼容性问题。这也将编码与单个库包统一起来，而不必依赖可能不受支持的特定版本。"

#: ../../Tigase_Development/Old_Stuff.rst:104
msgid ""
"**Easy to deploy** - Another reason to not use third-party tools is to "
"make it easier for end-users to install and use the server."
msgstr "**易于部署** - 不使用第三方工具的另一个原因是使终端用户更容易安装和使用服务器。"

#: ../../Tigase_Development/Old_Stuff.rst:106
msgid ""
"**Efficient development** - As no third-party libraries are used, Tigase "
"needs either to implement many things on its own or use as much as "
"possible of JDK functionality. We try to use as much as possible of "
"existing library provided with JDK and the rest is custom coded."
msgstr ""
"**高效开发** - "
"由于没有使用第三方库，Tigase需要自己实现很多东西，或者尽可能多地使用JDK功能。我们尝试尽可能多地使用JDK提供的现有库，其余的都是自定义编码的。"

#: ../../Tigase_Development/Old_Stuff.rst:108
msgid ""
"What features of JDKv5 are critical for Tigase development? Why I can’t "
"simply re-implement some code to make it compatible with earlier JDK "
"versions?"
msgstr "JDKv5的哪些特性对Tigase开发至关重要？为什么我不能简单地重新实现一些代码以使其与早期的JDK版本兼容？"

#: ../../Tigase_Development/Old_Stuff.rst:110
msgid ""
"**Non-blocking I/O for SSL/TLS** - This is functionality which can’t be "
"simply re-implemented in JDK-1.4. As the whole server uses NIO it doesn’t"
" make sense to use blocking I/O for SSL and TLS."
msgstr ""
"**SSL/TLS 的非阻塞 I/O** - "
"这是在JDK-1.4中不能简单地重新实现的功能。由于整个服务器都使用NIO，因此对SSL和TLS使用阻塞I/O是没有意义的。"

#: ../../Tigase_Development/Old_Stuff.rst:112
msgid "**SASL** - This could be re-implemented for JDK-1.4 without much effort."
msgstr "**SASL** - 这可以对JDK-1.4重新实现而无需付出太多努力。"

#: ../../Tigase_Development/Old_Stuff.rst:114
msgid ""
"**Concurrent package** - This could be re-implemented for JDK-1.4 but "
"takes a lot of work. This is a critical part of the server as it uses "
"multi-threading and concurrent processing."
msgstr ""
"**Concurrent package** - "
"这可以为JDK-1.4重新实现，但需要做很多工作。这是服务器的关键部分，因为它使用多线程和并发处理。"

#: ../../Tigase_Development/Old_Stuff.rst:116
msgid ""
"**Security package** - There number of extensions to the security package"
" which otherwise would not work as easily with earlier versions of JDK."
msgstr "**Security package** - 安全包有许多扩展，否则这些扩展无法与早期版本的JDK一起使用。"

#: ../../Tigase_Development/Old_Stuff.rst:118
msgid ""
"**LinkedHashMap** - in JDKv6 is a basement for the Tigase cache "
"implementation."
msgstr "**LinkedHashMap** - 在JDKv6中是Tigase缓存实现的基础。"

#: ../../Tigase_Development/Old_Stuff.rst:120
msgid ""
"**Light HTTP server** - JDKv6 offers built-in light HTTP server which is "
"needed to implement HTTP binding (JEP-0124) and HTTP user interface to "
"monitor server activity and work with the server configuration."
msgstr ""
"**Light HTTP server** - JDKv6提供了实现HTTP绑定 (JEP-0124) "
"和HTTP用户界面以监控服务器活动并使用服务器配置所需的内置轻型HTTP服务器。"

#: ../../Tigase_Development/Old_Stuff.rst:122
msgid ""
"As the JDK improves, so does our programming as we gain the ability to "
"use new methods, efficiencies, and sometimes shortcuts."
msgstr "随着JDK的改进，我们的编程也随之改进，因为我们获得了使用新方法，高效率，有时甚至是捷径的能力。"

#: ../../Tigase_Development/Old_Stuff.rst:124
msgid ""
"Currently Tigase requires **JDKv8** and we recommend updating it as often"
" as needed!"
msgstr "目前Tigase需要 **JDKv8**，我们建议根据需要经常更新它！"

#: ../../Tigase_Development/Old_Stuff.rst:127
msgid "API Description for Virtual Domains Management in the Tigase Server"
msgstr "Tigase服务器中虚拟域管理的API说明"

#: ../../Tigase_Development/Old_Stuff.rst:129
msgid ""
"The purpose of this guide is to introduce vhost management in Tigase "
"server. Please refer to the JavaDoc documentation for all specific "
"details not covered in this guide. All interfaces are well documented and"
" you can use existing implementation as an example code base and "
"reference point. The VHost management files are located in the repository"
" and you can browse them using the `source viewer "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts>`__."
msgstr ""
"本指南的目的是介绍Tigase服务器中的虚拟主机管理。有关本指南未涵盖的所有具体细节，请参阅JavaDoc文档。所有接口都有很好的文档记录，您可以将现有实现用作示例代码库和参考点。"
" VHost管理文件位于存储库中，您可以使用 `source viewer <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts>`__ 浏览它们。"

#: ../../Tigase_Development/Old_Stuff.rst:131
msgid ""
"Virtual hosts management in Tigase can be adjusted in many ways through "
"the flexible API. The core elements of the virtual domains management is "
"interface `VHostManager <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostManager.java>`__ "
"class. They are responsible for providing the virtual hosts information "
"to the rest of the Tigase server components. In particular to the "
"`MessageRouter <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/server/MessageRouter.java>`__ "
"class which controls how XMPP packets flow inside the server."
msgstr ""
"Tigase中的虚拟主机管理可以通过灵活的API以多种方式进行调整。虚拟域管理的核心元素是接口 `VHostManager "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostManager.java>`__类。他们负责向其余的Tigase服务器组件提供虚拟主机信息。特别是"
" `MessageRouter <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/server/MessageRouter.java>`__ "
"类，其控制XMPP数据包如何在服务器内部流动。"

#: ../../Tigase_Development/Old_Stuff.rst:133
msgid ""
"The class you most likely want to re-implement is `VHostJDBCRepository "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" used as a default virtual hosts storage and implementing the "
"`VHostRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ "
"interface. You might need to have your own implementation in order to "
"store and access virtual hosts in other than Tigase’s own data storage. "
"This is especially important if you are going to modify the virtual "
"domains list through systems other than Tigase."
msgstr ""
"您最有可能要重新实现的类是 `VHostJDBCRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" 其用作默认虚拟主机存储和实现 `VHostRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ "
"接口。您可能需要拥有自己的实现才能在Tigase自己的数据存储之外存储和访问虚拟主机。如果您要通过Tigase以外的系统修改虚拟域列表，这一点尤其重要。"

#: ../../Tigase_Development/Old_Stuff.rst:135
msgid ""
"The very basic virtual hosts storage is provided by `VHostItem "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__ class. "
"This is read only storage and provides the server a bootstrap vhosts data"
" at the first startup time when the database with virtual hosts is empty "
"or is not accessible. Therefore it is advised that all `VHostItem "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__ "
"implementations extend this class. The example code is provided in the "
"`VHostJDBCRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" file."
msgstr ""
"非常基本的虚拟主机存储由 `VHostItem <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__ "
"类提供。这是只读存储，当具有虚拟主机的数据库为空或不可访问时，它会在首次启动时为服务器提供引导虚拟主机数据。因此，建议所有\n"
"`VHostItem <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__ "
"实现扩展此类。示例代码在 `VHostJDBCRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" 文件中提供。"

#: ../../Tigase_Development/Old_Stuff.rst:137
msgid ""
"All components which may need virtual hosts information or want to "
"interact with virtual hosts management subsystem should implement the "
"`VHostListener <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostListener.java>`__ "
"interface. In some cases implementing this interface is necessary to "
"receive packets for processing."
msgstr ""
"所有可能需要虚拟主机信息或想要与虚拟主机管理子系统交互的组件都应该实现 `VHostListener "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts /VHostListener.java>`__ "
"接口。在某些情况下，实现此接口对于接收数据包进行处理是必要的。"

#: ../../Tigase_Development/Old_Stuff.rst:139
msgid ""
"Virtual host information is carried out in 2 forms inside the Tigase "
"server:"
msgstr "虚拟主机信息在Tigase服务器内部以2种形式执行："

#: ../../Tigase_Development/Old_Stuff.rst:141
msgid "As a **String** value with the domain name"
msgstr "作为带有域名的 **String** 值"

#: ../../Tigase_Development/Old_Stuff.rst:143
msgid ""
"As a `VHostItem <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__ which "
"contains all the domain information including the domain name, maximum "
"number of users for this domain, whether the domain is enabled or "
"disabled and so on. The JavaDoc documentation contains all the details "
"about all available fields and usage."
msgstr ""
"作为一个 `VHostItem <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__，它包含了包括域名在内的所有域信息，此域的最大用户数，域是启用还是禁用等等。"
" JavaDoc文档包含有关所有可用字段和用法的所有详细信息。"

#: ../../Tigase_Development/Old_Stuff.rst:145
msgid ""
"Here is a complete list of all interfaces and classes with a brief "
"description for each of them:"
msgstr "以下是所有接口和类的完整列表，以及每个接口和类的简要说明："

#: ../../Tigase_Development/Old_Stuff.rst:147
msgid ""
"`VHostManagerIfc <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostManagerIfc.java>`__ -"
" is an interface used to access virtual hosts information in all other "
"server components. There is one default implementation of the interface: "
"`VHostManager <#vhostMgr>`__."
msgstr ""
"`VHostManagerIfc <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostManagerIfc.java>`__ -"
" 是用于访问所有其他虚拟主机信息的接口服务器组件。该接口有一个默认实现：`VHostManager <#vhostMgr>`__。"

#: ../../Tigase_Development/Old_Stuff.rst:149
msgid ""
"`VHostListener <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostListener.java>`__ - "
"is an interface which allows components to interact with the "
"`VHostManager <#vhostMgr>`__. The interaction is in both ways. The "
"VHostManager provides virtual hosts information to components and "
"components provide some control data required to correctly route packets "
"to components."
msgstr ""
"`VHostListener <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostListener.java>`__ - "
"是一个允许组件与 `VHostManager <#vhostMgr>`__ 交互的接口。 其交互是双向的。 "
"VHostManager向组件提供虚拟主机信息，组件提供一些控制数据，以便将数据包正确路由到组件。"

#: ../../Tigase_Development/Old_Stuff.rst:151
msgid ""
"`VHostRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ -"
" is an interface used to store and load virtual domains list from the "
"database or any other storage media. There are 2 implementations for this"
" interface: `VHostConfigRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VhostConfigRepository.java>`__"
" which loads vhosts information for the configuration file and provides "
"read-only storage and - `VHostJDBCRepository <https://github.com/tigase"
"/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" class which extends `VHostConfigRepository <https://github.com/tigase"
"/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VhostConfigRepository.java>`__"
" and allows for both - reading and saving virtual domains list. "
"VHostJDBCRepository is loaded as a default repository by Tigase server."
msgstr ""
"`VHostRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ -"
" 是一个用于存储和加载虚拟域列表的接口数据库或任何其他存储介质。此接口有2个实现：`VHostConfigRepository "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VhostConfigRepository.java>`__"
" 加载vhosts信息配置文件并提供只读存储- 和 `VHostJDBCRepository <https://github.com/tigase"
"/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" 类扩展 `VHostConfigRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VhostConfigRepository.java>`__"
" 并允许读取和保存虚拟域列表。 Tigase服务器将VHostJDBCRepository作为默认存储库加载。"

#: ../../Tigase_Development/Old_Stuff.rst:153
msgid ""
"`VHostItem <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__ - is an"
" interface which allows for accessing all the virtual domain properties. "
"Sometimes the domain name is not sufficient for data processing. The "
"domain may be temporarily disabled, may have a limited number of users "
"and so on. Instances of this class keep all the information about the "
"domain which might be needed by the server components."
msgstr ""
"`VHostItem <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostItem.java>`__ - "
"是一个允许访问所有虚拟域属性的接口。有时域名不足以进行数据处理。该域可能被暂时禁用，可能有有限数量的用户等等。此类的实例保留有关服务器组件可能需要的域的所有信息。"

#: ../../Tigase_Development/Old_Stuff.rst:155
msgid ""
"`VHostManager <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostManager.java>`__ - "
"the default implementation of the VHostManagerIfc interface. It provides "
"components with the virtual hosts information and manages the virtual "
"hosts list. Processes ad-hoc commands for reloading, updating and "
"removing domains."
msgstr ""
"`VHostManager <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostManager.java>`__ - "
"VHostManagerIfc接口的默认实现。它为组件提供虚拟主机信息并管理虚拟主机列表。处理用于重新加载、更新和删除域的临时命令。"

#: ../../Tigase_Development/Old_Stuff.rst:157
msgid ""
"`VHostConfirRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VhostConfigRepository.java>`__"
" - a very basic implementation of the `VHostRepository "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ "
"for loading domains list from the configuration file."
msgstr ""
"`VHostConfirRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VhostConfigRepository.java>`__"
" - `VHostRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ "
"的一个非常基本的实现，用于从配置中加载域列表文件。"

#: ../../Tigase_Development/Old_Stuff.rst:159
msgid ""
"`VHostJDBCRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" - the default implementation of the `VHostRepository "
"<https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ "
"loaded by Tigase server. It allows to read and store virtual domains list"
" in the database accessible through UserRepository."
msgstr ""
"`VHostJDBCRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostJDBCRepository.java>`__"
" - Tigase服务器加载的 `VHostRepository <https://github.com/tigase/tigase-"
"server/blob/master/src/main/java/tigase/vhosts/VHostRepository.java>`__ "
"的默认实现。它允许在通过UserRepository访问的数据库中读取和存储虚拟域列表。"

#: ../../Tigase_Development/Old_Stuff.rst:162
msgid "Extending Virtual Domain settings"
msgstr "扩展虚拟域设置"

#: ../../Tigase_Development/Old_Stuff.rst:164
msgid ""
"In some cases it is desired to extend Virtual Domain to add some "
"additional settings. Since version 8.1.0 it is possible with use of "
"``VHostItemExtension`` and VHostItemExtensionProvider`."
msgstr ""
"在某些情况下，需要扩展虚拟域以添加一些额外的设置。从8.1.0版开始，可以使用 ``VHostItemExtension`` 和 "
"``VHostItemExtensionProvider``。"

#: ../../Tigase_Development/Old_Stuff.rst:166
msgid ""
"To do so, you need to create a class implementing ``VHostItemExtension``."
" This class will hold values of settings for each virtual host. It is "
"required to make it serializable to ``Element`` and deserializable from "
"``Element``. Moreover, it is required to make values of this class "
"modifiable by ad-hoc commands."
msgstr ""
"为此，您需要创建一个实现 ``VHostItemExtension`` 的类。此类将保存每个虚拟主机的设置值。需要使其可序列化为 "
"``Element`` 并且可从 ``Element`` 反序列化。此外，需要使该类的值可以通过临时命令进行修改。"

#: ../../Tigase_Development/Old_Stuff.rst:168
msgid ""
"It is recommended to provide additional methods allowing you to access "
"values of this class."
msgstr "建议提供额外的方法允许您访问此类的值。"

#: ../../Tigase_Development/Old_Stuff.rst:170
msgid ""
"Additionally, you need to implement ``VHostItemExtensionProvider`` "
"interface as a bean and return a class of your implementation of "
"``VHostItemExtension``."
msgstr ""
"此外，您需要将 ``VHostItemExtensionProvider`` 接口作为bean实现并返回 "
"``VHostItemExtension`` 实现的类。"

#: ../../Tigase_Development/Old_Stuff.rst:172
#, fuzzy
msgid ""
"*Example VHostItemExtensionProvider implementation for* "
"``SeeOtherHostVHostItemExtension``."
msgstr ""
"*用于* ``SeeOtherHostVHostItemExtension`` *的示例 VHostItemExtensionProvider "
"实现*。"

#: ../../Tigase_Development/Old_Stuff.rst:191
msgid "Stanza Limitations"
msgstr "节限制"

#: ../../Tigase_Development/Old_Stuff.rst:193
msgid ""
"Although XMPP is robust and can process stanzas of any size in bytes, "
"there are some limitations to keep in mind for Tigase server."
msgstr "尽管XMPP很强大并且可以处理任意大小的节（以字节为单位），但对于Tigase服务器有一些限制需要牢记。"

#: ../../Tigase_Development/Old_Stuff.rst:195
msgid ""
"Please keep these in mind when using default Tigase settings and creating"
" custom stanzas."
msgstr "在使用默认Tigase设置和创建自定义节时请记住这些。"

#: ../../Tigase_Development/Old_Stuff.rst:197
msgid "Limit to number of attributes of single element = 50 attributes"
msgstr "限制单个元素的属性数 = 50个属性"

#: ../../Tigase_Development/Old_Stuff.rst:199
msgid "Limit to number of elements = 1024 elements"
msgstr "元素数量限制 = 1024个元素"

#: ../../Tigase_Development/Old_Stuff.rst:201
msgid "Limit to length of element name = 1024 characters"
msgstr "元素名称长度限制 = 1024个字符"

#: ../../Tigase_Development/Old_Stuff.rst:203
msgid "Limit to length of attribute name = 1024 characters"
msgstr "属性名称长度限制 = 1024个字符"

#: ../../Tigase_Development/Old_Stuff.rst:205
msgid "Limit to length of attribute value = 10240 characters"
msgstr "属性值长度限制 = 10240个字符"

#: ../../Tigase_Development/Old_Stuff.rst:207
msgid "Limit to length of content of single element CDATA = 1048576b or 1Mb"
msgstr "单个元素CDATA的内容长度限制 = 1048576b或1Mb"

#: ../../Tigase_Development/Old_Stuff.rst:209
msgid "These values may be changed."
msgstr "这些值可能会改变。"

#: ../../Tigase_Development/Old_Stuff.rst:211
msgid ""
"**Note that these limitations are to elements and attributes that may be "
"within a stanza, but do not limit the overall stanza length.**"
msgstr "**请注意，这些限制是针对可能在一个节中的元素和属性，但不限制整个节的长度。**"

#: ../../Tigase_Development/Old_Stuff.rst:214
msgid "Escape Characters"
msgstr "转义字符"

#: ../../Tigase_Development/Old_Stuff.rst:216
msgid ""
"There are special characters that need to be escaped if they are included"
" in the stanza to avoid conflicts. The rules are similar to normal XML "
"escaping. The following is a list of characters that need to be escaped "
"and what to use to escape them:"
msgstr "如果某些特殊字符包含在节中，则需要对其进行转义以避免冲突。这些规则类似于普通的XML转义。以下是需要转义的字符列表以及使用什么来转义它们："

#: ../../Tigase_Development/Old_Stuff.rst:227
msgid "API changes in the Tigase Server 5.x"
msgstr "Tigase Server 5.x中的API更改"

#: ../../Tigase_Development/Old_Stuff.rst:229
msgid "**THIS INFORMATION IS FOR OLDER VERSIONS OF TIGASE**"
msgstr "**此信息适用于旧版本的TIGASE**"

#: ../../Tigase_Development/Old_Stuff.rst:231
msgid ""
"The API changes can effect you only if you develop own code to run inside"
" Tigase server. The changes are not extensive but in some circumstances "
"may require many simple changes in a few files."
msgstr "仅当您开发自己的代码以在Tigase服务器中运行时，API更改才会对您产生影响。这些更改并不广泛，但在某些情况下可能需要在几个文件中进行许多简单的更改。"

#: ../../Tigase_Development/Old_Stuff.rst:233
msgid ""
"All the changes are related to introducing tigase.xmpp.JID and "
"tigase.xmpp.BareJID classes. It is recommended to use them for all "
"operations performed on the user JID instead of the String class which "
"was used before changes."
msgstr ""
"所有更改都与引入 tigase.xmpp.JID 和 tigase.xmpp.BareJID "
"类有关。建议将它们用于对用户JID执行的所有操作，而不是更改之前使用的String类。"

#: ../../Tigase_Development/Old_Stuff.rst:235
msgid ""
"There are a few advantages to using the new classes. First of all they do"
" all the user JID checking and parsing, they also perform stringprep "
"processing. Therefore if you use data kept by instance of the JID or "
"BareJID you can be sure they are valid and correct."
msgstr ""
"使用新类有一些优点。首先他们对所有的用户JID进行检查和解析，他们也做stringprep处理。因此，如果您使用由JID或 "
"BareJID实例保存的数据，您可以确定它们是有效且正确的。"

#: ../../Tigase_Development/Old_Stuff.rst:237
msgid ""
"These are not all advantages however. JID parsing code appears to use a "
"lot of CPU power to conduct it’s operations. JIDs and parts of the JIDs "
"are used in many places of the stanza processing and the parsing is "
"performed over and over again in all these places, wasting CPU cycles, "
"memory and time. Therefore, great performance benefits can be gained from"
" these new class are in if, once parsed, JIDs are reused in all further "
"stanza processing."
msgstr ""
"然而，这些并不是所有优点。 JID解析代码似乎使用了大量大功率的CPU来执行它的操作。 "
"JID和部分JID用于节处理的许多地方，并且在所有这些地方一遍又一遍地执行解析，浪费了CPU周期、内存和时间。因此，如果JID在解析后在所有进一步的节处理中被重用，则可以从这些新类中获得巨大的性能优势。"

#: ../../Tigase_Development/Old_Stuff.rst:239
msgid ""
"This is where the tigase.server.Packet class comes in handy. Instances of"
" the Packet class encloses XML stanza and pre-parses some, the most "
"commonly used elements of the stanza, stanza source and destination "
"addresses among them. As an effect there are all new methods available in"
" the class:"
msgstr ""
"这就是 tigase.server.Packet 类派上用场的地方。 "
"Packet类的实例包含XML节并预解析一些节中最常用的元素、节源地址和目标地址。作为一种效果，该类中提供了所有新方法："

#: ../../Tigase_Development/Old_Stuff.rst:250
msgid "Whereas following methods are still available but have been deprecated:"
msgstr "尽管以下方法仍然可用，但已被弃用："

#: ../../Tigase_Development/Old_Stuff.rst:257
#, fuzzy
msgid ""
"Please refer to the JavaDoc documentation for the `Packet "
"<http://docs.tigase.org/tigase-"
"server/snapshot/javadoc/tigase/server/Packet.html>`__ class and methods "
"to learn all the details of these methods and difference between them."
msgstr ""
"请参考 `Packet <http://docs.tigase.org/tigase-"
"server/snapshot/javadoc/tigase/server/Packet.html>`__ "
"类和方法的JavaDoc文档来学习所有的这些方法的详细信息以及它们之间的区别。"

#: ../../Tigase_Development/Old_Stuff.rst:259
msgid ""
"Another difference is that you can no longer create the ``Packet`` "
"instance using a constructor. Instead there are a few factory methods "
"available:"
msgstr "另一个区别是您不能再使用构造函数创建 ``Packet`` 实例。相反，有一些工厂方法可用："

#: ../../Tigase_Development/Old_Stuff.rst:267
msgid ""
"Again, please refer to the JavaDoc documentation for all the details. The"
" main point of using these methods is that they actually return an "
"instance of one of the following classes instead of the ``Packet`` class:"
" ``Iq``, ``Presence`` or ``Message``."
msgstr ""
"同样，请参阅JavaDoc文档了解所有详细信息。使用这些方法的要点是它们实际上返回以下类之一的实例，而不是 ``Packet`` "
"类：``Iq``、``Presence`` 或 ``Message``。"

#: ../../Tigase_Development/Old_Stuff.rst:269
msgid ""
"There is also a number of utility methods helping with creating a copy of"
" the Packet instance preserving as much pre-parsed data as possible:"
msgstr "还有一些实用方法可以帮助创建Packet实例的副本，以保留尽可能多的预解析数据："

#: ../../Tigase_Development/Old_Stuff.rst:279
msgid ""
"We try to keep the `JavaDoc <http://docs.tigase.org/tigase-"
"server/snapshot/javadoc/>`__ documentation as complete as possible. "
"Please contact us if you find missing or incorrect information."
msgstr ""
"我们尽量保持 `JavaDoc <http://docs.tigase.org/tigase-"
"server/snapshot/javadoc/>`__ 文档尽可能完整。如果您发现信息缺失或不正确，请与我们联系。"

#: ../../Tigase_Development/Old_Stuff.rst:281
msgid ""
"The main point is to reuse ``JID`` or ``BareJID`` instances in your code "
"as much as possible. You never know, your code may run in highly loaded "
"systems with throughput of 100k XMPP packets per second."
msgstr ""
"要点是尽可能地在代码中重用 ``JID`` 或 ``BareJID`` "
"实例。您永远不会知道，您的代码可能会在负载为每秒100k的XMPP数据包的高负载系统中运行。"

#: ../../Tigase_Development/Old_Stuff.rst:283
msgid ""
"Another change. This one a bit risky as it is very difficult to find all "
"places where this could be used. There are several utility classes and "
"methods which accept source and destination address of a stanza and "
"produce something. There was a great confusion with them, as in some of "
"them the first was the source address and in others the destination "
"address. All the code has been re-factored to keep the parameter order "
"the same in all places. Right now the policy is: **source address "
"first**. Therefore in all places where there was a method:"
msgstr "另一个变化。这个有点冒险，因为很难找到所有可以使用它的地方。有几个实用程序类和方法可以接受节的源地址和目标地址并产生一些东西。它们很混乱，因为其中一些是源地址，而另一些则是目标地址。所有代码都经过重构，以保持所有位置的参数顺序相同。目前的政策是：**源地址优先**。因此，在所有有以下方法的地方："

#: ../../Tigase_Development/Old_Stuff.rst:289
msgid "it has been changed to:"
msgstr "它已更改为："

#: ../../Tigase_Development/Old_Stuff.rst:295
msgid ""
"As far as I know most of these method were used only by myself so I do "
"not expect much trouble for other developers."
msgstr "据我所知，这些方法中的大部分都是我自己使用的，所以我不希望其他开发人员有太多麻烦。"

