# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version:  TigaseDoc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-03 03:02-0700\n"
"PO-Revision-Date: 2022-07-27 22:18+0000\n"
"Last-Translator: Qian Luo <qian.luo@tigase.net>\n"
"Language: zh_CN\n"
"Language-Team: Chinese (Simplified) <http://translate.tigase.net/projects"
"/tigase-xmpp-server/dg-experimental/zh_Hans/>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../Tigase_Development/Experimental.rst:2
msgid "Experimental"
msgstr "实验"

#: ../../Tigase_Development/Experimental.rst:4
msgid ""
"The guide contains description of non-standard or experimental "
"functionality of the server. Some of them are based on never published "
"extensions, some of them are just test implementation for new ideas or "
"performance improvements."
msgstr "该指南包含对服务器的非标准或实验性功能的描述。其中一些基于从未发布的扩展，其中一些只是测试实现以获取新想法或性能改进。"

#: ../../Tigase_Development/Experimental.rst:6
#, fuzzy
msgid ":ref:`Dynamic Rosters<dynamicRosters>`"
msgstr ":ref:`动态名册<dynamicRosters>`"

#: ../../Tigase_Development/Experimental.rst:8
#, fuzzy
msgid ":ref:`Mobile Optimizations<mobileoptimizations>`"
msgstr ":ref:`移动优化<mobileoptimizations>`"

#: ../../Tigase_Development/Experimental.rst:10
#, fuzzy
msgid ":ref:`Bosh Session Cache<boshsessioncache>`"
msgstr ":ref:`Bosh会话缓存<boshsessioncache>`"

#: ../../Tigase_Development/Experimental.rst:16
msgid "Dynamic Rosters"
msgstr "动态名册"

#: ../../Tigase_Development/Experimental.rst:19
#: ../../Tigase_Development/Experimental.rst:153
#: ../../Tigase_Development/Experimental.rst:226
msgid "Problem Description"
msgstr "问题描述"

#: ../../Tigase_Development/Experimental.rst:21
msgid ""
"Normal roster contacts stored and created as **dynamic roster parts** are"
" delivered to the end user transparently. The XMPP client doesn’t really "
"know what contacts come from its own **static** roster created manually "
"by the user and what contacts come from a **dynamic** roster part; "
"contacts and groups generated dynamically by the server logic."
msgstr ""
"作为 **动态花名册部分** "
"存储和创建的正常花名册联系人透明地交付给最终用户。XMPP客户端并不真正知道哪些联系人来自用户手动创建的自己的**静态**名册，哪些联系人来自 "
"**动态** 名册部分；联系人和组由服务器逻辑动态生成的。"

#: ../../Tigase_Development/Experimental.rst:23
msgid ""
"Some specialized clients need to store extra bits of information about "
"roster contacts. For the normal user **static** roster information can be"
" stored as private data and is available only to this single user. In "
"some cases however, clients need to store information about contacts from"
" the dynamic roster part and this information must be available to all "
"users accessing **dynamic** roster part."
msgstr ""
"一些专业客户需要存储有关名册联系人的额外信息。对于普通用户，**静态** "
"名册信息可以作为私有数据存储，并且仅供该单个用户使用。然而，在某些情况下，客户端需要存储来自动态名册部分的联系人信息，并且此信息必须可供所有访问 "
"**动态** 名册部分的用户使用。"

#: ../../Tigase_Development/Experimental.rst:25
msgid ""
"The protocol defined here allows the exchange of information, saving and "
"retrieving extra data about the contacts."
msgstr "此处定义的协议允许交换信息、保存和检索有关联系人的额外数据。"

#: ../../Tigase_Development/Experimental.rst:28
msgid "Syntax and Semantics"
msgstr "句法和语义"

#: ../../Tigase_Development/Experimental.rst:30
msgid ""
"Extra contact data is accessed using IQ stanzas, specifically by means of"
" a child element qualified by the **jabber:iq:roster-dynamic** namespace."
" The child element MAY contain one or more children, each describing a "
"unique contact item. Content of the element is not specified and is "
"implementation dependent. From Tigase’s point of view it can contain any "
"valid XML data. Whole element is passed to the DynamicRoster "
"implementation class as is and without any verification. Upon retrieving "
"the contact extra data the DynamicRoster implementation is supposed to "
"provide a valid XML element with all the required data for requested "
"**jid**."
msgstr ""
"使用IQ节访问额外的联系人数据，特别是通过 **jabber:iq:roster-dynamic** "
"命名空间限定的子元素。子元素可以包含一个或多个子元素，每个子元素描述一个独特的联系人项目。元素的内容未指定，取决于实现。从Tigase的角度来看，它可以包含任何有效的XML数据。整个元素按原样传递给DynamicRoster实现类，无需任何验证。在检索联系人额外数据时，DynamicRoster实现应该提供一个有效的XML元素，其中包含请求的"
" **jid** 所需的所有数据。"

#: ../../Tigase_Development/Experimental.rst:32
msgid ""
"The **jid** attribute specifies the Jabber Identifier (JID) that uniquely"
" identifies the roster item. Inclusion of the **jid** attribute is "
"**REQUIRED**."
msgstr "**jid** 属性指定唯一标识名册项目的Jabber标识符 (JID)。包含 **jid** 属性是 **必需的**。"

#: ../../Tigase_Development/Experimental.rst:34
msgid "Following actions on the extra contact data are allowed:"
msgstr "允许对额外联系人数据执行以下操作："

#: ../../Tigase_Development/Experimental.rst:36
msgid "**set** - stores extra information about the contact"
msgstr "**set** - 存储有关联系人的额外信息"

#: ../../Tigase_Development/Experimental.rst:38
msgid "**get** - retrieves extra information about the contact"
msgstr "**get** - 检索有关联系人的额外信息"

#: ../../Tigase_Development/Experimental.rst:41
msgid "Retrieving Contact Data"
msgstr "检索联系人数据"

#: ../../Tigase_Development/Experimental.rst:43
msgid ""
"Upon connecting to the server and becoming an active resource, a client "
"can request the extra contact data. This request can be made either "
"before or after requesting the user roster. The client’s request for the "
"extra contact data is **OPTIONAL**."
msgstr "在连接到服务器并成为活动资源后，客户端可以请求额外的联系人数据。可以在请求用户名册之前或之后提出此请求。客户对额外联系数据的请求是 **可选的**。"

#: ../../Tigase_Development/Experimental.rst:45
msgid ""
"Example: Client requests contact extra data from the server using **get**"
" request:"
msgstr "示例：客户端使用 **get** 请求从服务器请求联系人额外数据："

#: ../../Tigase_Development/Experimental.rst:55
msgid ""
"Example: Client receives contact extra data from the server, but there "
"was either no extra information for the user, or the user was not found "
"in the dynamic roster:"
msgstr "示例：客户端从服务器接收到额外的联系人数据，但没有用户的额外信息，或者在动态名册中找不到用户："

#: ../../Tigase_Development/Experimental.rst:65
msgid ""
"Example: Client receives contact extra data from the server, and there "
"was some extra information found about the contact:"
msgstr "示例：客户端从服务器接收到联系人额外数据，并且发现了一些关于联系人的额外信息："

#: ../../Tigase_Development/Experimental.rst:80
msgid "Updating/Saving Extra Information About the Contact"
msgstr "更新/保存有关联系人的额外信息"

#: ../../Tigase_Development/Experimental.rst:82
msgid ""
"At any time, a client **MAY** update extra contact information on the "
"server."
msgstr "在任何时候，客户端 **可以** 更新服务器上的额外联系信息。"

#: ../../Tigase_Development/Experimental.rst:84
msgid "Example: Client sends contact extra information using **set** request."
msgstr "示例：客户端使用 **set** 请求发送联系人额外信息。"

#: ../../Tigase_Development/Experimental.rst:97
#: ../../Tigase_Development/Experimental.rst:126
msgid "Client responds to the server:"
msgstr "客户端响应服务器："

#: ../../Tigase_Development/Experimental.rst:103
msgid ""
"A client **MAY** update contact extra information for more than a single "
"item in one request:"
msgstr "客户 **可以** 在一个请求中更新多个项目的联系人额外信息："

#: ../../Tigase_Development/Experimental.rst:105
msgid ""
"Example: Client sends contact extra information using **set** request "
"with many <item/> elements."
msgstr "示例：客户端使用带有许多<item/>元素的 **set** 请求发送联系人额外信息。"

#: ../../Tigase_Development/Experimental.rst:133
#: ../../Tigase_Development/Experimental.rst:204
msgid "Configuration"
msgstr "配置"

#: ../../Tigase_Development/Experimental.rst:135
msgid ""
"DynamicRoster implementation class should be configured in the "
"**config.tdsl** file:"
msgstr "DynamicRoster实现类应该在 **config.tdsl** 文件中配置："

#: ../../Tigase_Development/Experimental.rst:145
#, fuzzy
msgid ""
"If you want to pass configuration to your implementation simply use "
"``@ConfigField`` annotation on your variable (see :ref:`Component "
"implementation - Lesson 2 - Configuration<cil2>` for more details)."
msgstr ""
"如果您想将配置传递给您的实现，只需在变量上使用 ``@ConfigField`` 注释（有关详细信息，请参阅 :ref:`组件实现 - 第2课 -"
" 配置<cil2>`）。"

#: ../../Tigase_Development/Experimental.rst:150
msgid "Mobile Optimizations"
msgstr "移动优化"

#: ../../Tigase_Development/Experimental.rst:155
msgid ""
"In default configuration stanzas are sent to the client when processing "
"is finished, but in mobile environment sending or receiving data drains "
"battery due to use of the radio."
msgstr "在默认配置中，当处理完成时，节会发送到客户端，但在移动环境中，发送或接收数据会由于使用无线电而消耗电池电量。"

#: ../../Tigase_Development/Experimental.rst:157
msgid ""
"To save energy data should be sent to client only if it is important or "
"client is waiting for it."
msgstr "为节省能源，数据应仅在重要或客户正在等待时才发送给客户。"

#: ../../Tigase_Development/Experimental.rst:160
msgid "Solution"
msgstr "解决方案"

#: ../../Tigase_Development/Experimental.rst:162
msgid ""
"When mobile client is entering inactive state it notifies server about it"
" by sending following stanza:"
msgstr "当移动客户端进入非活动状态时，它通过发送以下节来通知服务器："

#: ../../Tigase_Development/Experimental.rst:172
msgid ""
"After receiving stanza server starts queuing stanza which should be send "
"to mobile client. What kind of queued stanzas depends on the plugins used"
" and in case of **Mobile v3** presence stanzas are queued as well as "
"message stanzas which are Message Carbons. Any other stanza (such as iq "
"or plain message) is sent immediately to the client and every stanza from"
" queue is also sent at this time."
msgstr ""
"收到节后，服务器开始排队节，其应被发送到移动客户端。什么样的排队节取决于所使用的插件，如果是 **Mobile v3** "
"存在节，则排队的节以及作为消息碳的消息节。任何其他节（例如iq或纯消息）都会立即发送到客户端，此时队列中的每个节都会被发送。"

#: ../../Tigase_Development/Experimental.rst:174
msgid ""
"When mobile client is entering active state it notifies server by sending"
" following stanza:"
msgstr "当移动客户端进入活动状态时，它通过发送以下节来通知服务器："

#: ../../Tigase_Development/Experimental.rst:184
msgid "After receiving stanza server sends all queued stanzas to the client."
msgstr "收到节后，服务器将所有排队的节发送给客户端。"

#: ../../Tigase_Development/Experimental.rst:186
msgid ""
"Also all stanzas from queue will be sent if number of stanzas in queue "
"will reach queue size limit. By default this limit is set to 50."
msgstr "如果队列中的节数将达到队列大小限制，则队列中的所有节将被发送。默认情况下，此限制设置为50。"

#: ../../Tigase_Development/Experimental.rst:189
msgid "Queuing Algorithms"
msgstr "排队算法"

#: ../../Tigase_Development/Experimental.rst:191
msgid "There are three mobile optimization plugins for Tigase:"
msgstr "Tigase共有三个移动优化插件："

#: ../../Tigase_Development/Experimental.rst:193
msgid "**Mobile v1** - all presence stanzas are kept in queue"
msgstr "**Mobile v1** - 所有存在节都保留在队列中"

#: ../../Tigase_Development/Experimental.rst:195
msgid "**Mobile v2** - only last presence from each source is kept in queue"
msgstr "**Mobile v2** - 只有来自每个来源的最后一次出现才保留在队列中"

#: ../../Tigase_Development/Experimental.rst:197
msgid ""
"**Mobile v3** - only last presence from each source is kept in queue, "
"also Message Carbons are queued"
msgstr "**Mobile v3** - 只有来自每个源的最后一次存在保留在队列中，消息碳也排队"

#: ../../Tigase_Development/Experimental.rst:199
msgid ""
"If you wish to activate you Mobile v1 plugin you need to send presented "
"above with xmlns attribute value replaced with "
"http://tigase.org/protocol/mobile#v1"
msgstr ""
"如果您希望激活您的Mobile v1插件，您需要发送上面显示的xmlns属性值替换为 "
"http://tigase.org/protocol/mobile#v1"

#: ../../Tigase_Development/Experimental.rst:201
msgid ""
"If you wish to activate you Mobile v2 plugin you need to send presented "
"above with xmlns attribute value replaced with "
"http://tigase.org/protocol/mobile#v2"
msgstr ""
"如果您希望激活您的Mobile v2插件，您需要发送上面显示的xmlns属性值替换为 "
"http://tigase.org/protocol/mobile#v2"

#: ../../Tigase_Development/Experimental.rst:206
msgid ""
"Mobile plugins are not activated by default thus additional entry in the "
"``config.tdsl`` is required:"
msgstr "移动插件默认不激活，因此需要在 ``config.tdsl`` 中添加额外条目："

#: ../../Tigase_Development/Experimental.rst:214
msgid ""
"You may substitute ``mobile_v1`` with ``mobile_v2`` or ``mobile_v3`` "
"depending on which algorithm you wish to use."
msgstr "您可以根据您希望使用的算法将 ``mobile_v1`` 替换为 ``mobile_v2`` 或 ``mobile_v3``。"

#: ../../Tigase_Development/Experimental.rst:218
msgid "USE ONLY ONE PLUGIN AT A TIME!"
msgstr "一次只能使用一个插件！"

#: ../../Tigase_Development/Experimental.rst:223
msgid "Bosh Session Cache"
msgstr "Bosh会话缓存"

#: ../../Tigase_Development/Experimental.rst:228
msgid ""
"Web clients have no way to store any data locally, on the client side. "
"Therefore after a web page reload the web clients loses all the context "
"it was running in before the page reload."
msgstr "Web客户端无法在客户端本地存储任何数据。因此，在重新加载网页后，Web客户端会丢失在重新加载页面之前运行的所有上下文。"

#: ../../Tigase_Development/Experimental.rst:230
msgid ""
"Some elements of the context can be retrieved from the server like the "
"roster and all contacts presence information. Some other data however, "
"can not be restored easily like opened chat windows and the chat windows "
"contents. Even if the roster restoring is possible, this operation is "
"very expensive in terms of time and resources on the server side."
msgstr "可以从服务器检索上下文的某些元素，例如名册和所有联系人的存在信息。但是，其他一些数据无法轻松恢复，例如打开的聊天窗口和聊天窗口的内容。即使可以进行名册恢复，该操作在服务器端的时间和资源方面代价也是非常昂贵的。"

#: ../../Tigase_Development/Experimental.rst:232
msgid ""
"On of possible solutions is to allow web client to store some data in the"
" Bosh component cache on the server side for the time while the Bosh "
"session is active. After the page reloads, if the client can somehow "
"retrieve SID (stored in cookie or provided by the web application running"
" the web client) it is possible to reload all the data stored in the Bosh"
" cache to the client."
msgstr ""
"一种可能的解决方案是允许Web客户端在Bosh会话处于活动状态时将一些数据存储在服务器端的Bosh组件缓存中。页面重新加载后，如果客户端能够以某种方式检索SID（存储在cookie中或由运行Web客户端的Web应用程序提供），则可以将存储在"
" Bosh缓存中的所有数据重新加载到客户端。"

#: ../../Tigase_Development/Experimental.rst:234
msgid ""
"Bosh session context data are: roster, contacts presence information, "
"opened chat windows, chat windows content and some other minor data. "
"Ideally the web client should be able to store any data in the Bosh "
"component cache it wants."
msgstr "Bosh会话上下文数据是：名册、联系人状态信息、打开的聊天窗口、聊天窗口内容和其他一些次要数据。理想情况下，Web客户端应该能够将任何数据存储在它想要的Bosh组件缓存中。"

#: ../../Tigase_Development/Experimental.rst:238
msgid "Bosh Session Cache Description"
msgstr "Bosh会话缓存说明"

#: ../../Tigase_Development/Experimental.rst:240
msgid ""
"The Bosh Session Cache is divided into 2 parts - automatic cache and "
"dynamic cache."
msgstr "Bosh Session Cache分为两部分 - 自动缓存和动态缓存。"

#: ../../Tigase_Development/Experimental.rst:242
msgid ""
"The reason for splitting the cache into 2 parts is that some data can be "
"collected automatically by the Bosh component and it would be very "
"inefficient to require the client to store the data in the Bosh cache. "
"The best example for such data is the Roster and contacts presence "
"information."
msgstr "将缓存分成两部分的原因是，一些数据可以由Bosh组件自动收集，并且要求客户端将数据存储在Bosh缓存中，这会非常低效。此类数据的最佳示例是名册和联系人存在信息。"

#: ../../Tigase_Development/Experimental.rst:244
msgid ""
"**automatic cache** - is the cache part which is created automatically by"
" the Bosh component without any interaction with the client. The client, "
"however, can access the cache at any time. I would say this is a read-"
"only cache but I don’t want to stop client from manipulating the cache if"
" it needs. The client usually, only retrieves data from this part of the "
"cache as all changes should be automatically updated by the Bosh "
"component. The general idea for the automatic cache is that the data "
"stored there are accessible in the standard XMPP form. So no extra code "
"is needed for processing them."
msgstr ""
"**自动缓存** - "
"是由Bosh组件自动创建的缓存部分，无需与客户端进行任何交互。但是，客户端可以随时访问缓存。我会说这是一个只读缓存，但我不想阻止客户端在需要时操作缓存。客户端通常只从这部分缓存中检索数据，因为所有更改都应该由Bosh组件自动更新。自动缓存的总体思路是存储在那里的数据可以以标准的XMPP形式访问。所以不需要额外的代码来处理它们。"

#: ../../Tigase_Development/Experimental.rst:246
msgid ""
"**dynamic cache** - is the cache part which is or can be modified at any "
"time by the client. Client can store, retrieve, delete and modify data in"
" this part of the cache."
msgstr "**动态缓存** - 是客户端可以随时修改或可以修改的缓存部分。客户端可以在这部分缓存中存储、检索、删除和修改数据。"

#: ../../Tigase_Development/Experimental.rst:249
msgid "Cache Protocol"
msgstr "缓存协议"

#: ../../Tigase_Development/Experimental.rst:251
msgid ""
"All the Bosh Session Cache actions are executed using additional "
"``<body/>`` element attributes: ``cache`` and ``cache-id``. Attribute "
"cache stores the action performed on the Bosh ``cache`` and the ``cache-"
"id`` attribute refers to the ``cache`` element if the action attribute "
"needs it. ``cache-id`` is optional. There is a default cache ID (empty "
"one) associated with the elements for which the ``cache-id`` is not "
"provided."
msgstr ""
"所有Bosh会话缓存操作都使用附加的<body/>元素属性执行：``cache`` 和 ``cache-"
"id``。如果操作属性需要，属性缓存是存储在 Bosh ``cache`` 上执行的操作，``cache-id`` 属性指的是 ``cache``"
" 元素。 ``cache-id`` 是可选的。有一个默认的缓存ID（空的）与未提供 ``cache-id`` 的元素相关联。"

#: ../../Tigase_Development/Experimental.rst:253
msgid ""
"If the ``<body/>`` element contains the cache attribute it means that all"
" data included in the ``<body/>`` refer to the cache action. It is not "
"allowed, for example to send a message in the body and have the cache "
"action set to **get**. The ``<body/>`` element with cache action **get**,"
" **get_all**, **on**, **off**, **remove** must be empty. The ``<body/>`` "
"element with actions **set** or **add** must contain data to store in the"
" cache."
msgstr ""
"如果 ``<body/>`` 元素包含缓存属性，则意味着 ``<body/>`` "
"中包含的所有数据都引用缓存操作。这是不允许的，例如在正文中发送消息并将缓存操作设置为 **get**。具有缓存操作 "
"**get**、**get_all**、**on**、**off**、**remove** 的 ``<body/>`` 元素必须为空。带有动作 "
"**set** 或 **add** 的 ``<body/>`` 元素必须包含要存储在缓存中的数据。"

#: ../../Tigase_Development/Experimental.rst:256
msgid "Cache Actions"
msgstr "缓存操作"

#: ../../Tigase_Development/Experimental.rst:258
msgid ""
"**on** or **off** - the client can switch the cache on or off at any time"
" during the session. It is recommended, however that the client switches "
"the cache **on** in the first body packet, otherwise some information "
"from the automatic cache may be missing. The automatic cache is created "
"from the stream of data passing the Bosh component. Therefore if the "
"cache is switched on after the roster retrieval is completed then the "
"roster information will be missing in the cache. If the cache is set to "
"**off** (the default value) all requests to the cache are ignored. This "
"is to ensure backward compatibility with the original Bosh specification "
"and to make sure that in a default environment the Bosh component doesn’t"
" consume any extra resources for cache processing and storing as the "
"cache wouldn’t be used by the client anyway."
msgstr ""
"**on** 或 **off** - 客户端可以在会话期间随时打开或关闭缓存。但是，建议客户端在第一个主体数据包中切换缓存 "
"**on**，否则可能会丢失自动缓存中的某些信息。自动缓存是从通过Bosh组件的数据流创建的。因此，如果在名册检索完成后打开缓存，则名册信息将在缓存中丢失。如果缓存设置为"
" **off** "
"（默认值），所有对缓存的请求都将被忽略。这是为了确保与原始Bosh规范的向后兼容性，并确保在默认环境中，Bosh组件不会为缓存处理和存储消耗任何额外资源，因为客户端无论如何都不会使用缓存。"

#: ../../Tigase_Development/Experimental.rst:260
msgid ""
"**get** - retrieves the cache element pointing by the cache-id from the "
"Bosh cache. Note there is no **result** cache action. The ``<body/>`` "
"sent as a response from the server to the client may contain cache "
"results for a given cache-id and it may also contain other data received "
"by the Bosh component for the client. It may also happen that large "
"cached data are split into a few parts and each part can be sent in a "
"separate ``<body/>`` element. It may usually happen for the Roster data."
msgstr ""
"**get** - 从Bosh缓存中检索由cache-id指向的缓存元素。请注意，没有 **result** "
"缓存操作。作为响应从服务器发送到客户端的 <body/> "
"可能包含给定缓存ID的缓存结果，它还可能包含Bosh组件为客户端接收的其他数据。也可能发生大缓存数据被分成几个部分，每个部分可以在一个单独的 "
"<body/> 元素中发送。名册数据通常会发生这种情况。"

#: ../../Tigase_Development/Experimental.rst:262
msgid ""
"**get_all** - retrieves all the elements kept in the Bosh cache. That "
"action can can be performed after the page reload. The client doesn’t "
"have to request every single cached item one by one. It can retrieve all "
"cache items in one go. It doesn’t mean however the whole cache is sent to"
" the client in a single ``<body/>`` element. The cache content will be "
"divided into a smaller parts of a reasonable size and will be sent to the"
" client in a separate ``<body/>`` elements. It may also happen that the "
"**``<body/>``** element contain the cache elements as well as the new "
"requests sent to the user like new messages or presence information."
msgstr ""
"**get_all** - "
"检索保存在Bosh缓存中的所有元素。该操作可以在页面重新加载后执行。客户端不必逐个请求每个缓存项。它可以一次检索所有缓存项。然而，这并不意味着整个缓存在单个"
" <body/> 元素中发送到客户端。缓存内容将被划分为合理大小的较小部分，并在单独的 <body/> 元素中发送到客户端。 ** "
"``<body/>`` ** 元素也可能包含缓存元素以及发送给用户的新请求，例如新消息或存在信息。"

#: ../../Tigase_Development/Experimental.rst:264
msgid ""
"**set** - sends data to the Bosh Session cache for later retrieval. The "
"client can store any data it wants in the cache. The Bosh components "
"stores in the cache under the selected ID all the data inside the "
"``<body/>`` element. The only restriction is that the cached data must be"
" a valid XML content. The data are returned to the client in exactly the "
"same form as they were received from the server. The **set** action "
"replaces any previously stored data under this ID."
msgstr ""
"**set** - 将数据发送到Bosh Session缓存以供以后检索。客户端可以在缓存中存储它想要的任何数据。 Bosh组件将 <body/>"
" 元素内的所有数据存储在所选ID下的缓存中。唯一的限制是缓存的数据必须是有效的XML内容。数据以与从服务器接收到的完全相同的形式返回给客户端。 "
"**set** 操作将替换此ID下任何以前存储的数据。"

#: ../../Tigase_Development/Experimental.rst:266
msgid ""
"**add** - adds new element to the cache under the given ID. This action "
"might be useful for storing data for the opened chat window. The client "
"can add new elements for the chat window, like new messages, icons and so"
" on…​"
msgstr ""
"**add** - "
"将新元素添加到给定ID下的缓存中。此操作对于为打开的聊天窗口存储数据可能很有用。客户端可以为聊天窗口添加新元素，比如新消息、图标等等……​"

#: ../../Tigase_Development/Experimental.rst:268
msgid "**remove** - removes the cached element for the given cache ID."
msgstr "**remove** - 删除给定缓存ID的缓存元素。"

#: ../../Tigase_Development/Experimental.rst:271
msgid "Cache ID"
msgstr "缓存ID"

#: ../../Tigase_Development/Experimental.rst:273
msgid ""
"Cache ID can be an any character string. There might be some IDs reserved"
" for a special cases, like for the Roster content. To avoid any future ID"
" conflicts reserved ID values starts with: **bosh** - string."
msgstr ""
"缓存ID可以是任意字符串。可能会为特殊情况保留一些ID，例如用于名册内容。为避免将来出现任何ID冲突，保留的ID值以：**bosh** - "
"字符串开头。"

#: ../../Tigase_Development/Experimental.rst:275
msgid ""
"There is a default cache ID - en empty string. Thus cache-id attribute "
"can be omitted and then the requests refers to data stored under the "
"default (empty) ID."
msgstr "有一个默认缓存ID - 一个空字符串。因此可以省略cache-id属性，然后请求引用存储在默认（空）ID下的数据。"

#: ../../Tigase_Development/Experimental.rst:278
msgid "Reserved Cache ID Names"
msgstr "保留的缓存ID名称"

#: ../../Tigase_Development/Experimental.rst:280
msgid "Here is a list of reserved Cache IDs:"
msgstr "以下是保留的缓存ID列表："

#: ../../Tigase_Development/Experimental.rst:282
msgid ""
"**bosh-roster** - The user roster is cached in the Bosh component in "
"exactly the same form as it was received from the core server. The Bosh "
"Cache might or might not do optimizations on the roster like removing "
"elements from the cached roster if the roster **remove** has been "
"received or may just store all the roster requests and then send them all"
" to the client. There is a one mandatory optimization the Bosh Cache must"
" perform. It must remember the last (and only the last) presence status "
"for each roster item. Upon roster retrieving from the cache the Bosh "
"component must send the roster item first and then the presence for the "
"item. If the presence is missing it means an offline presence. If the "
"roster is small it can be sent to the client in a single packet but for a"
" large roster it is recommended to split contact lists to batches of max "
"100 elements. The Bosh component may send all roster contacts first and "
"then all presences or it can send a part of the roster, presences for "
"sent items, next part of the roster, presences for next items and so on."
msgstr ""
"**bosh-roster** - 用户名册以与从核心服务器接收到的完全相同的形式缓存在Bosh组件中。 "
"Bosh缓存可能会也可能不会对名册进行优化，例如如果名册 **删除** "
"已收到，则从缓存的名册中删除元素，或者可能只存储所有名册请求，然后将它们全部发送到客户端。 Bosh "
"Cache必须执行一项强制优化。它必须记住每个花名册项目的最后一个（也是唯一的最后一个）存在状态。在从缓存中检索名册后，Bosh "
"组件必须先发送名册项目，然后再发送该项目的存在。如果存在缺失，则意味着离线存在。如果名册很小，可以在单个数据包中发送给客户端，但对于大型名册，建议将联系人列表拆分为最多100个元素的批次。"
" "
"Bosh组件可以先发送所有名册联系人，然后发送所有存在信息，或者它可以发送名册的一部分、已发送项目的存在信息、名册的下一部分、下一个项目的存在信息等等。"

#: ../../Tigase_Development/Experimental.rst:284
msgid ""
"**bosh-resource-bind** - The user resource bind is also cached to allow "
"the client quickly retrieve information about the full JID for the "
"established Bosh session."
msgstr "**bosh-resource-bind** - 用户资源绑定也被缓存，以允许客户端快速检索有关已建立Bosh会话的完整JID的信息。"

